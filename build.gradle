plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
}

group "net.jeikobu"

def releaseNumber = "1.0"
def isSnapshot = true

version = releaseNumber
if (isSnapshot) version = version + "-SNAPSHOT"

def buildNumber = "LOCAL_DEV_BUILD"
if (project.hasProperty("teamcity"))
    buildNumber = teamcity["build.number"]

sourceCompatibility = 1.8

repositories {
    maven {
        url "https://nexus.jeikobu.net/repository/maven-central/"
    }

    maven {
        url "https://nexus.jeikobu.net/repository/jcenter-proxy/"
    }

    maven {
        url "https://nexus.jeikobu.net/repository/maven-releases/"
    }

    maven {
        url "https://nexus.jeikobu.net/repository/maven-snapshots/"
    }
    mavenCentral()
}

dependencies {
    implementation 'com.discord4j:Discord4J:2.10.1'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'io.rincl:rincl-resourcebundle:0.7.1'
    implementation 'org.tinylog:tinylog:1.3.5'
    implementation 'org.tinylog:slf4j-binding:1.3.5'
    implementation "org.cfg4j:cfg4j-core:4.4.0"

    // mandatory dependencies for using Spock
    compile "org.codehaus.groovy:groovy-all:2.4.15"
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.6.5"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // allows mocking of classes without default constructor (together with CGLIB
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar
}

jar {
    manifest {
        attributes(
                "Created-By": "Shindou Jeikobu",
                "Date": new Date(),
                "Implementation-Version": version + "-" + buildNumber,
                "Build-Number": buildNumber
        )
    }
}

publishing {
    afterEvaluate {
        repositories {
            maven {
                credentials {
                    if (project.hasProperty("teamcity")) {
                        username teamcity["nexusUsername"]
                        password teamcity["nexusPassword"]
                    } else {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
                def releasesRepoUrl = "https://nexus.jeikobu.net/repository/maven-releases/"
                def snapshotsRepoUrl = "https://nexus.jeikobu.net/repository/maven-snapshots/"
                url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            }
        }

        publications {
            mavenJava(MavenPublication) {
                groupId = group
                artifactId 'jbase'

                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}